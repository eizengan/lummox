#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "lummox"
require "ffi"

Lummox::SDL.init!

button_buffer = FFI::MemoryPointer.new(Lummox::SDL::Core::MessageBoxButtonData, 2)
button_texts = %w[Okay Cancel].map { |t| FFI::MemoryPointer.from_string(t) }
button_texts.each_with_index do |text, index|
  Lummox::SDL::Core::MessageBoxButtonData.new(
    button_buffer + index * Lummox::SDL::Core::MessageBoxButtonData.size
  ).tap do |button_data|
    button_data[:flags] = 0
    button_data[:button_id] = index
    button_data[:text] = text
  end
end

color_buffer = FFI::MemoryPointer.new(Lummox::SDL::Core::MessageBoxColor, 5)
{
  message_box_color_background: [0, 0, 0],
  message_box_color_text: [0, 0, 0],
  message_box_color_button_border: [127, 0, 0],
  message_box_color_button_background: [63, 0, 0],
  message_box_color_button_selected: [63, 0, 63]
}.each do |color_type, color_array|
  Lummox::SDL::Core::MessageBoxColor.new(
    color_buffer + Lummox::SDL::Core::MessageBoxColorType[color_type] * Lummox::SDL::Core::MessageBoxColor.size
  ).tap do |color|
    color[:r] = color_array[0]
    color[:g] = color_array[1]
    color[:b] = color_array[2]
  end
end
color_scheme = Lummox::SDL::Core::MessageBoxColorScheme.new(color_buffer)

data = Lummox::SDL::Core::MessageBoxData.new
data[:flags] = Lummox::SDL::Core::MESSAGE_BOX_BUTTONS_RIGHT_TO_LEFT
data[:window] = nil
data[:title] = FFI::MemoryPointer.from_string("a custom message")
data[:message] = FFI::MemoryPointer.from_string("but not a very good one")
data[:num_buttons] = button_buffer.size / button_buffer.type_size
data[:buttons] = button_buffer
data[:color_scheme] = color_scheme

clicked_button_id = Lummox::SDL::Core::IntPtr.new
Lummox::SDL::Core.show_message_box(data, clicked_button_id)
clicked_button_text = button_texts[clicked_button_id.value].read_string
puts "clicked '#{clicked_button_text}' button"

event = Lummox::SDL::Core::Event.new
while Lummox::SDL::Core.poll_event(event).nonzero? do
  # clear out the queue
end

Lummox::SDL.quit!

puts "all done!"
