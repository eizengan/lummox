#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "lummox"

Lummox.init!

window = Lummox::Window.new("Space to change color, Return to change drawing type", size: [480, 360])
window.renderer.color = [255, 255, 255, 255]

# set up rects
rect_size = 25
num_rects = 10
x_margin = (window.display_settings.size[0] - num_rects * rect_size) / (num_rects + 1)
rects = Array.new(rect_size) do |index|
  x = x_margin + (rect_size + x_margin) * index
  Lummox::Rect.new(x, 0, rect_size, rect_size)
end

# set up drawing type switching
drawing_types = %i[rects_float fill_rects_float].cycle
rects.drawing_type = drawing_types.next
Lummox::EventDispatcher.add_event_listener(:key_down) do |event|
  next unless event.keycode == :keycode_return

  rects.drawing_type = drawing_types.next
end

# set up color switching
Lummox::EventDispatcher.add_event_listener(:key_down) do |event|
  next unless event.keycode == :keycode_space

   random_color = Array.new(3) { Random.rand(0..2) * 127 }.push(255)
   window.renderer.color = random_color
end

# set up window close
Lummox::EventDispatcher.add_event_listener(:window_event) { |event| event.window.close! if event.close? }

# main loop
init_time = Time.now
phase_multiplier = (2 * Math::PI) / num_rects
amplitude = 0.5 * (window.display_settings.size[1] - rect_size)
until window.closed?
  # update
  offset = Time.now - init_time
  rects.each_with_index do |rect, index|
    rect.y = amplitude * (1 + Math.sin(phase_multiplier * index + offset))
  end

  # draw
  window.clear
  window.draw(rects)
  window.present

  # consume events
  Lummox::EventDispatcher.dispatch_events
end

Lummox.quit!

puts "all done!"
